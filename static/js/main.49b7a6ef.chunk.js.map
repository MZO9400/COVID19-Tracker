{"version":3,"sources":["Container/Main/Main.module.css","serviceWorker.js","Component/CovidCard/CovidCard.js","Container/Main/Main.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","props","Card","variant","key","country_name","CardContent","Typography","color","gutterBottom","component","cases","parseInt","new_cases","deaths","new_deaths","serious_critical","total_recovered","region","Main","state","country","selectedStats","allCountries","countriesStats","___isSelectorOpen","getGeoInfo","axios","get","then","response","data","setState","catch","error","console","log","getAllCountries","method","url","headers","affected_countries","fetchData","countries_stat","renderData","changeHandler","event","target","value","name","filter","item","this","className","CSS","main","FormControl","InputLabel","Select","open","onClose","onOpen","onChange","val","MenuItem","map","cards","CovidCard","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.49b7a6ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__3Rkai\",\"cards\":\"Main_cards__1AlNj\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nexport default props => (\r\n  <Card variant=\"outlined\" key={props.country_name}>\r\n    <CardContent>\r\n      <Typography color=\"textSecondary\" gutterBottom>\r\n        {props.country_name}\r\n      </Typography>\r\n      <Typography variant=\"h5\" component=\"h2\">\r\n        Cases: {props.cases}\r\n      </Typography>\r\n      {parseInt(props.new_cases) > 0 ? (\r\n        <Typography color=\"textSecondary\" variant=\"h5\" component=\"h2\">\r\n          New cases: {props.new_cases}\r\n        </Typography>\r\n      ) : null}\r\n      {parseInt(props.deaths) > 0 ? (\r\n        <Typography>Deaths: {props.deaths}</Typography>\r\n      ) : null}\r\n      {parseInt(props.new_deaths) > 0 ? (\r\n        <Typography color=\"textSecondary\" variant=\"h5\" component=\"h2\">\r\n          New deaths: {props.new_deaths}\r\n        </Typography>\r\n      ) : null}\r\n      {parseInt(props.serious_critical) > 0 ? (\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Critical: {props.serious_critical}\r\n        </Typography>\r\n      ) : null}\r\n      {parseInt(props.total_recovered) > 0 ? (\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n          Recovered: {props.total_recovered}\r\n        </Typography>\r\n      ) : null}\r\n      {props.region && (\r\n        <Typography color=\"textSecondary\" variant=\"body2\" component=\"p\">\r\n          Region: {props.region}\r\n          <br />\r\n        </Typography>\r\n      )}\r\n    </CardContent>\r\n  </Card>\r\n);\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CovidCard from \"../../Component/CovidCard/CovidCard\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport CSS from \"./Main.module.css\";\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    country: \"All\",\r\n    selectedStats: [],\r\n    allCountries: [],\r\n    countriesStats: [],\r\n    ___isSelectorOpen: false\r\n  };\r\n  componentDidMount() {\r\n    this.getAllCountries();\r\n    this.fetchData();\r\n    this.getGeoInfo();\r\n  }\r\n  getGeoInfo = () => {\r\n    axios\r\n      .get(\"https://ipapi.co/json/\")\r\n      .then(response => {\r\n        let data = response.data;\r\n        this.setState({\r\n          country: data.country_name\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  getAllCountries = () => {\r\n    axios({\r\n      method: \"GET\",\r\n      url:\r\n        \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/affected.php\",\r\n      headers: {\r\n        \"content-type\": \"application/octet-stream\",\r\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"6031df45bfmshc5765d0ea25d076p1365efjsne5a49e4220bd\"\r\n      }\r\n    })\r\n      .then(response => {\r\n        this.setState({ allCountries: response.data.affected_countries });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  fetchData = () => {\r\n    axios({\r\n      method: \"GET\",\r\n      url:\r\n        \"https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php\",\r\n      headers: {\r\n        \"content-type\": \"application/octet-stream\",\r\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"6031df45bfmshc5765d0ea25d076p1365efjsne5a49e4220bd\"\r\n      }\r\n    }).then(response => {\r\n      this.setState({ countriesStats: response.data.countries_stat });\r\n      this.renderData(this.state.country);\r\n    });\r\n  };\r\n  changeHandler = event => {\r\n    this.renderData(event.target.value);\r\n  };\r\n  renderData = name => {\r\n    if (name === \"All\") {\r\n      this.setState({\r\n        selectedStats: this.state.countriesStats,\r\n        country: name\r\n      });\r\n      return;\r\n    }\r\n    this.setState({ country: name });\r\n    var country = this.state.countriesStats.filter(item => {\r\n      console.log(item);\r\n      return item.country_name === name;\r\n    });\r\n    this.setState({ selectedStats: [...country] });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={CSS.main}>\r\n        <FormControl>\r\n          <InputLabel>Country</InputLabel>\r\n          <Select\r\n            open={this.state.___isSelectorOpen}\r\n            onClose={() => this.setState({ ___isSelectorOpen: false })}\r\n            onOpen={() => this.setState({ ___isSelectorOpen: true })}\r\n            value={this.state.country}\r\n            onChange={val => this.changeHandler(val)}\r\n          >\r\n            <MenuItem value=\"All\">\r\n              <em>All</em>\r\n            </MenuItem>\r\n            {this.state.allCountries.map((item, key) => (\r\n              <MenuItem value={item} key={key}>\r\n                {item}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <div className={CSS.cards}>\r\n          {this.state.selectedStats.map((item, key) => (\r\n            <CovidCard {...item} key={key} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Main from \"./Container/Main/Main\";\nReactDOM.render(<Main />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}