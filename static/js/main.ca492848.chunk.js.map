{"version":3,"sources":["Container/Main/Main.module.css","serviceWorker.js","Component/CovidCard/CovidCard.js","Container/Main/Main.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","props","Card","variant","CardContent","Typography","color","gutterBottom","country","component","confirmed","deaths","recovered","CardActions","lastUpdate","split","Main","state","covid19Stats","allCountries","___isSelectorOpen","getGeoInfo","axios","get","then","response","data","setState","country_name","fetchData","catch","error","console","log","getAllCountries","method","url","headers","params","countries","forEach","item","i","push","unique","Set","a","changeHandler","event","target","value","className","CSS","main","FormControl","InputLabel","Select","open","this","onClose","onOpen","onChange","val","MenuItem","map","key","cards","CovidCard","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ca492848.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Main_main__3Rkai\",\"cards\":\"Main_cards__1AlNj\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nexport default props => (\r\n  <Card variant=\"outlined\">\r\n    <CardContent>\r\n      <Typography color=\"textSecondary\" gutterBottom>\r\n        {props.country}\r\n      </Typography>\r\n      <Typography variant=\"h5\" component=\"h2\">\r\n        Confirmed: {props.confirmed}\r\n      </Typography>\r\n      <Typography color=\"textSecondary\">Deaths: {props.deaths}</Typography>\r\n      <Typography variant=\"body2\" component=\"p\">\r\n        Recovered: {props.recovered}\r\n        <br />\r\n      </Typography>\r\n    </CardContent>\r\n    <CardActions>\r\n      <Typography color=\"textSecondary\">\r\n        Last Updated: {props.lastUpdate.split(\"T\")[0]}\r\n      </Typography>\r\n    </CardActions>\r\n  </Card>\r\n);\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CovidCard from \"../../Component/CovidCard/CovidCard\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport CSS from \"./Main.module.css\";\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    country: \"\",\r\n    covid19Stats: [],\r\n    allCountries: [],\r\n    ___isSelectorOpen: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.getAllCountries();\r\n    this.getGeoInfo();\r\n  }\r\n\r\n  getGeoInfo = () => {\r\n    axios\r\n      .get(\"https://ipapi.co/json/\")\r\n      .then(response => {\r\n        let data = response.data;\r\n        this.setState({\r\n          country: data.country_name\r\n        });\r\n        this.fetchData(data.country_name);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  getAllCountries = () => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\",\r\n      headers: {\r\n        \"content-type\": \"application/octet-stream\",\r\n        \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"6031df45bfmshc5765d0ea25d076p1365efjsne5a49e4220bd\"\r\n      },\r\n      params: {\r\n        country: \"\"\r\n      }\r\n    })\r\n      .then(response => {\r\n        var countries = [];\r\n        response.data.data.covid19Stats.forEach((item, i) => {\r\n          countries.push(item.country);\r\n        });\r\n        let unique = [...new Set(countries)];\r\n        this.setState({ allCountries: unique });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  fetchData = async country => {\r\n    axios({\r\n      method: \"GET\",\r\n      url: \"https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/stats\",\r\n      headers: {\r\n        \"content-type\": \"application/octet-stream\",\r\n        \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": \"6031df45bfmshc5765d0ea25d076p1365efjsne5a49e4220bd\"\r\n      },\r\n      params: {\r\n        country\r\n      }\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        this.setState({\r\n          country: country,\r\n          covid19Stats: response.data.data.covid19Stats\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  changeHandler = event => {\r\n    this.fetchData(event.target.value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={CSS.main}>\r\n        <FormControl>\r\n          <InputLabel>Country</InputLabel>\r\n          <Select\r\n            open={this.state.___isSelectorOpen}\r\n            onClose={() => this.setState({ ___isSelectorOpen: false })}\r\n            onOpen={() => this.setState({ ___isSelectorOpen: true })}\r\n            value={this.state.country}\r\n            onChange={val => this.changeHandler(val)}\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>All</em>\r\n            </MenuItem>\r\n            {this.state.allCountries.map((item, key) => (\r\n              <MenuItem value={item} key={key}>\r\n                {item}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <div className={CSS.cards}>\r\n          {this.state.covid19Stats.map((item, key) => (\r\n            <CovidCard {...item} key={key} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Main from \"./Container/Main/Main\";\nReactDOM.render(<Main />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}